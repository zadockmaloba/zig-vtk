const std = @import("std");
const vtkmodule = @import("vtkModule.zig");

const TargetOpts = std.Build.ResolvedTarget;
const OptimizeOpts = std.builtin.OptimizeMode;
const Dependency = std.Build.Dependency;

const commonCorePath = "Common/Core";
const commonCoreSources = .{
    "vtkAbstractArray.cxx",
    "vtkAnimationCue.cxx",
    "vtkArchiver.cxx",
    "vtkArray.cxx",
    "vtkArrayCoordinates.cxx",
    "vtkArrayExtents.cxx",
    "vtkArrayExtentsList.cxx",
    "vtkArrayIterator.cxx",
    "vtkArrayRange.cxx",
    "vtkArraySort.cxx",
    "vtkArrayWeights.cxx",
    "vtkAtomicMutex.cxx",
    "vtkBitArray.cxx",
    "vtkBitArrayIterator.cxx",
    "vtkBoxMuellerRandomSequence.cxx",
    "vtkBreakPoint.cxx",
    "vtkByteSwap.cxx",
    "vtkCallbackCommand.cxx",
    "vtkCharArray.cxx",
    "vtkCollection.cxx",
    "vtkCollectionIterator.cxx",
    "vtkCommand.cxx",
    "vtkCommonInformationKeyManager.cxx",
    "vtkDataArray.cxx",
    "vtkDataArrayCollection.cxx",
    "vtkDataArrayCollectionIterator.cxx",
    "vtkDataArraySelection.cxx",
    "vtkDebugLeaks.cxx",
    "vtkDebugLeaksManager.cxx",
    "vtkDoubleArray.cxx",
    "vtkDynamicLoader.cxx",
    "vtkEventForwarderCommand.cxx",
    "vtkFileOutputWindow.cxx",
    "vtkFloatArray.cxx",
    "vtkFloatingPointExceptions.cxx",
    "vtkGarbageCollector.cxx",
    "vtkGarbageCollectorManager.cxx",
    "vtkGaussianRandomSequence.cxx",
    "vtkIdList.cxx",
    "vtkIdListCollection.cxx",
    "vtkIdTypeArray.cxx",
    "vtkIndent.cxx",
    "vtkInformation.cxx",
    "vtkInformationDataObjectKey.cxx",
    "vtkInformationDoubleKey.cxx",
    "vtkInformationDoubleVectorKey.cxx",
    "vtkInformationIdTypeKey.cxx",
    "vtkInformationInformationKey.cxx",
    "vtkInformationInformationVectorKey.cxx",
    "vtkInformationIntegerKey.cxx",
    "vtkInformationIntegerPointerKey.cxx",
    "vtkInformationIntegerVectorKey.cxx",
    "vtkInformationIterator.cxx",
    "vtkInformationKey.cxx",
    "vtkInformationKeyLookup.cxx",
    "vtkInformationKeyVectorKey.cxx",
    "vtkInformationObjectBaseKey.cxx",
    "vtkInformationObjectBaseVectorKey.cxx",
    "vtkInformationRequestKey.cxx",
    "vtkInformationStringKey.cxx",
    "vtkInformationStringVectorKey.cxx",
    "vtkInformationUnsignedLongKey.cxx",
    "vtkInformationVariantKey.cxx",
    "vtkInformationVariantVectorKey.cxx",
    "vtkInformationVector.cxx",
    "vtkIntArray.cxx",
    "vtkLargeInteger.cxx",
    "vtkLogger.cxx",
    "vtkLongArray.cxx",
    "vtkLongLongArray.cxx",
    "vtkLookupTable.cxx",
    "vtkMath.cxx",
    "vtkMersenneTwister.cxx",
    "vtkMinimalStandardRandomSequence.cxx",
    "vtkMultiThreader.cxx",
    "vtkOStrStreamWrapper.cxx",
    "vtkOStreamWrapper.cxx",
    "vtkObject.cxx",
    "vtkObjectBase.cxx",
    "vtkObjectFactory.cxx",
    "vtkObjectFactoryCollection.cxx",
    "vtkOldStyleCallbackCommand.cxx",
    "vtkOutputWindow.cxx",
    "vtkOverrideInformation.cxx",
    "vtkOverrideInformationCollection.cxx",
    "vtkPoints.cxx",
    "vtkPoints2D.cxx",
    "vtkPriorityQueue.cxx",
    "vtkRandomPool.cxx",
    "vtkRandomSequence.cxx",
    "vtkReferenceCount.cxx",
    "vtkScalarsToColors.cxx",
    "vtkShortArray.cxx",
    "vtkSignedCharArray.cxx",
    "vtkSmartPointerBase.cxx",
    "vtkSortDataArray.cxx",
    "vtkStdString.cxx",
    "vtkStringArray.cxx",
    "vtkStringOutputWindow.cxx",
    "vtkStringToken.cxx",
    "vtkTimePointUtility.cxx",
    "vtkTimeStamp.cxx",
    "vtkUnsignedCharArray.cxx",
    "vtkUnsignedIntArray.cxx",
    "vtkUnsignedLongArray.cxx",
    "vtkUnsignedLongLongArray.cxx",
    "vtkUnsignedShortArray.cxx",
    "vtkVariant.cxx",
    "vtkVariantArray.cxx",
    "vtkVersion.cxx",
    "vtkVoidArray.cxx",
    "vtkWeakPointerBase.cxx",
    "vtkWeakReference.cxx",
    "vtkWindow.cxx",
    "vtkXMLFileOutputWindow.cxx",
};

pub fn addVtkCommon(b: *std.Build, dep: *Dependency, target: TargetOpts, optimize: OptimizeOpts) !*std.Build.Step.Compile {
    var lib = b.addStaticLibrary(.{
        .name = "vtkCommonCore",
        .target = target,
        .optimize = optimize,
    });

    const cfg = vtkmodule.ExportHeaderConfig{
        .library_target = "vtkCommonCore",
    };
    std.debug.print("{s}\n", .{try cfg.generateHeader()});

    lib.linkLibCpp();

    lib.addIncludePath(dep.path("Common/Core"));
    lib.addCSourceFiles(.{
        .root = dep.path(commonCorePath),
        .files = &commonCoreSources,
        .flags = &.{"-std=c++14"},
    });
    return lib;
}
